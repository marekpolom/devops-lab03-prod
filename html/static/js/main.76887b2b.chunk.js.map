{"version":3,"sources":["axios/ApiSearch.js","comps/Flag.js","comps/SortBtn.js","App.js","serviceWorker.js","index.js"],"names":["ApiSearch","Promise","resolve","axios","get","then","response","data","error","message","console","log","Error","err","catch","Flag","key","this","props","index","className","src","img","alt","country","React","Component","SortBtn","onClick","bind","App","search","a","setState","flags","searchedFlags","state","formSearch","str","cur","filter","item","x","currencies","forEach","curr","code","length","alpha3Code","toUpperCase","borders","includes","ph","RegExp","toLowerCase","name","test","sortButton","sort","sortBtn","reverse","initialValues","text","currency","onSubmit","values","setSubmitting","handleChange","touched","handleBlur","handleSubmit","isSubmitting","type","placeholder","onChange","onBlur","value","map","symbol","disabled","flag","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.76887b2b.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nvar URL = \"https://restcountries.eu/rest/v2\";\r\n\r\nfunction ApiSearch(){\r\n    return new Promise((resolve) => {\r\n        axios\r\n          .get(URL)\r\n          .then(function (response) {\r\n              const data = response.data;\r\n  \r\n              try {\r\n                if (data && data.data && data.data.error.message) {\r\n                  console.log(data);\r\n                  throw new Error();\r\n                }\r\n                \r\n                resolve(data);\r\n  \r\n              } catch (err) {\r\n                console.error(err);\r\n              }\r\n          })\r\n          .catch(function (error) {\r\n            console.log(error);\r\n          })\r\n    });\r\n  \r\n}\r\n\r\nexport default ApiSearch;","import React from \"react\";\r\n\r\nclass Flag extends React.Component {\r\n  render() {\r\n    return (\r\n        <div key={this.props.index} className=\"flag\">\r\n            <img src={this.props.img} alt={this.props.country}></img>\r\n            <p>{this.props.country}</p>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Flag;\r\n","import React from \"react\";\r\n\r\nclass SortBtn extends React.Component {\r\n  render() {\r\n    return (\r\n        <div className=\"sort-btn-cont\">\r\n            <button className=\"sort-btn\" onClick={this.props.onClick.bind(this)}>Sort</button>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SortBtn;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport ApiSearch from \"./axios/ApiSearch\";\r\nimport Flag from \"./comps/Flag\";\r\nimport SortBtn from \"./comps/SortBtn\";\r\nimport { Formik} from \"formik\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      flags: [],\r\n      searchedFlags: [],\r\n      sortBtn: true\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.search();\r\n  }\r\n\r\n  search = async () => {\r\n    let data = await ApiSearch();\r\n\r\n    this.setState({\r\n      flags: data,\r\n      searchedFlags: data,\r\n    });\r\n\r\n    console.log(this.state.flags);\r\n  };\r\n\r\n  formSearch = (str, cur) => {\r\n    let flags = this.state.flags;\r\n\r\n    console.log(cur);\r\n\r\n    if(cur !== \"default\"){\r\n      flags = flags.filter((item) => {\r\n        let x = false;\r\n\r\n        item.currencies.forEach((curr) => {\r\n          if(curr.code === cur){\r\n            x = true;\r\n          }\r\n        });\r\n\r\n        return x;\r\n      });\r\n    }\r\n\r\n    if (str.length > 0) {\r\n      let filter = flags.filter((item) => {\r\n        return item.alpha3Code === str;\r\n      });\r\n\r\n      if (str === str.toUpperCase() && filter.length > 0) {\r\n        flags = flags.filter((item) => {\r\n          return filter[0].borders.includes(item.alpha3Code);\r\n        });\r\n      } else {\r\n        let ph = new RegExp(`.*${str.toLowerCase()}.*`);\r\n\r\n        flags = flags.filter((item) => {\r\n          let name = item.name.toLowerCase();\r\n          return ph.test(name);\r\n        });\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      searchedFlags: flags,\r\n    });\r\n  };\r\n\r\n  sortButton = () => {\r\n    let flags = this.state.searchedFlags;\r\n    let sort = !this.state.sortBtn;\r\n\r\n    this.setState({\r\n      searchedFlags: flags.reverse(),\r\n      sortBtn: sort\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"search\">\r\n          <Formik\r\n            initialValues={{ text: \"\", currency: \"default\"}}\r\n            onSubmit={(values, { setSubmitting }) => {\r\n              this.formSearch(values.text, values.currency);\r\n              setSubmitting(false);\r\n            }}\r\n          >\r\n            {({\r\n              values,\r\n              touched,\r\n              handleChange,\r\n              handleBlur,\r\n              handleSubmit,\r\n              isSubmitting,\r\n            }) => (\r\n              <form onSubmit={handleSubmit}>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"text\"\r\n                  placeholder=\"Country name\"\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  value={values.text}\r\n                />\r\n                <select\r\n                  name=\"currency\"\r\n                  value={values.currency}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                >\r\n                  <option value=\"default\" key=\"default\">PICK CURRENCY</option>\r\n                  {\r\n                    this.state.searchedFlags.map((item) => {\r\n                      return(item.currencies.map((curr) => {\r\n                        let name = '';\r\n                        curr.code === null ? name = curr.name : name = curr.code\r\n                        return(\r\n                          <option value={name} key={name}>{name} ({curr.symbol})</option>\r\n                        );\r\n                      }));\r\n                    })\r\n                  }\r\n                </select>\r\n                <button type=\"submit\" disabled={isSubmitting}>\r\n                  Search\r\n                </button>\r\n              </form>\r\n            )}\r\n          </Formik>\r\n          <SortBtn onClick={this.sortButton}></SortBtn>\r\n        </div>\r\n        <div className=\"main\">\r\n          {this.state.searchedFlags.map((item, index) => {\r\n            return (\r\n              <Flag\r\n                img={item.flag}\r\n                country={item.name}\r\n                index={index}\r\n                key={index}\r\n              ></Flag>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}